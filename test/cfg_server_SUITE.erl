%% Auto-generated by https://github.com/Pouriya-Jahanbakhsh/estuff
%% -----------------------------------------------------------------------------
-module(cfg_server_SUITE).
-author('pouriya.jahanbakhsh@gmail.com').
%% -----------------------------------------------------------------------------
%% Exports:

%% ct callbacks:
-export([init_per_suite/1
        ,end_per_suite/1
        ,all/0
        ,init_per_testcase/2
        ,end_per_testcase/2]).

%% Testcases:
-export(['1'/1
        ,'2'/1
        ,'3'/1
        ,'4'/1
        ,'5'/1
        ,'6'/1
        ,'7'/1
        ,'8'/1
        ,'9'/1
        ,'10'/1]).

%% -----------------------------------------------------------------------------
%% Records & Macros & Includes:

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%% -----------------------------------------------------------------------------
%% ct callbacks:


all() ->
    ToInteger =
        fun
            ({Func, 1}) ->
                try
                    erlang:list_to_integer(erlang:atom_to_list(Func))
                catch
                    _:_ ->
                        0
                end;
            (_) -> % Arity > 1 | Arity == 0
                0
        end,
    % contains 0 for other functions:
    Ints = [ToInteger(X) || X <- ?MODULE:module_info(exports)],
    % 1, 2, ...
    PosInts = lists:sort([Int || Int <- Ints, Int > 0]),
    % '1', '2', ...
    [erlang:list_to_atom(erlang:integer_to_list(X)) || X <- PosInts].


init_per_suite(Cfg) ->
    application:start(sasl),
    Cfg.


end_per_suite(Cfg) ->
    application:stop(sasl),
    Cfg.


init_per_testcase(_TestCase, Cfg) ->
    Cfg.


end_per_testcase(_TestCase, _Cfg) ->
    ok.

%% -----------------------------------------------------------------------------
%% Test cases:


'1'(_) ->
    _ = cfg_test_utils:config([]),
    Opts = #{
        notify_tag => config,
        change_priority => false,
        delete_on_terminate => true,
        reload_on_signal => false,
        signal_handler_pre_reload => fun cfg_server:default_pre_reload/0,
        signal_handler_post_reload => fun cfg_server:default_post_reload/1,
        signal_handler_reload_sync => true,
        reload_on_timer => false,
        timer_pre_reload => fun cfg_server:default_pre_reload/0,
        timer_post_reload => fun cfg_server:default_post_reload/1
    },
    ?assertMatch({ok, _}, cfg:start_link({local, cfg}, [{env, cfg}], [], {ets, cfg}, Opts)),
    ?assertMatch({ok, []}, cfg:get({ets, cfg})),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, []}, cfg:get({ets, cfg})),
    _ = cfg_test_utils:config([{config, [{k, v}]}]),
    ?assertMatch(ok, cfg:set_readers(cfg, [{env, {cfg, config}}])),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, []}, cfg:get({ets, cfg})),
    ?assertMatch(ok, cfg:set_filters(cfg, [{k, atom}, {k2, any, default}])),
    ?assertMatch(ok, cfg:change_options(cfg, #{change_priority => true})),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, v}, cfg:get({ets, cfg}, k)),
    ?assertMatch({ok, default}, cfg:get({ets, cfg}, k2)),
    ?assertMatch(ok, cfg:stop(cfg)),





    _ = cfg_test_utils:clean_env(),
    Cfg = [
              {host, <<"1.1.1.1">>},
              {port, 8080}
          ],
    cfg_test_utils:set_env(Cfg),
    Filters = [
                  {host, {'&', [binary, binary_to_list]}, "127.0.0.1"},
                  {port, {'&', [integer, {size, {0, 65535}}]}}
              ],

    _ = erlang:process_flag(trap_exit, true),
    Result = cfg:start_link({local, cfg}, [{env, cfg}], Filters, {ets, cfg}, #{error_unknown_config => false, notify_tag => my_tag, delete_on_terminate => true, change_priority => true, notify_method => message}),
    ?assertMatch({ok, _}, Result),

    ?assertMatch({ok, "1.1.1.1"}, cfg:get({ets, cfg}, host)),

    ?assertMatch(ok, cfg:subscribe(cfg, Filters)),
    ?assertMatch(ok, cfg:subscribe(cfg, Filters)),
    ?assertMatch(ok, cfg:subscribe(cfg, Filters)),

    _ = application:set_env(cfg, host, <<"2.2.2.2">>),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, "2.2.2.2"}, cfg:get({ets, cfg}, host)),
    ?assertMatch({my_tag, {{value, [{host, "1.1.1.1"}, _]}, {value, [{host, "2.2.2.2"}, _]}}}, receive M -> M after 1000 -> timeout end),

    ?assertMatch(ok, cfg:change_options(cfg, #{notify_method => cast})),
    _ = application:set_env(cfg, host, <<"3.3.3.3">>),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, "3.3.3.3"}, cfg:get({ets, cfg}, host)),
    ?assertMatch({my_tag, {{value, [{host, "2.2.2.2"}, _]}, {value, [{host, "3.3.3.3"}, _]}}}, receive {'$gen_cast', M} -> M after 1000 -> timeout end),

    ?assertMatch(ok, cfg:change_options(cfg, #{notify_method => call})),
    _ = application:set_env(cfg, host, <<"2.2.2.2">>),
    ?assertMatch(ok, cfg_server:async_reload(cfg)),
    ?assertMatch({my_tag, {{value, [{host, "3.3.3.3"}, _]}, {value, [{host, "2.2.2.2"}, _]}}}, receive {'$gen_call', From, M} -> gen:reply(From, ok), M after 1000 -> timeout end),

    ok.


'2'(_) ->
    _ = cfg_test_utils:config([]),
    ?assertMatch({ok, _}, cfg:start_link({local, cfg}, [{env, cfg}], [], {ets, cfg}, #{})),
    ?assertMatch({ok, []}, cfg:get({env, cfg})),
    ?assertMatch(ok, cfg:reload(cfg)),
    ?assertMatch({ok, []}, cfg:get({env, cfg})),

    ok.



'3'(Cfg) ->
    _ = Cfg,
    ok.



'4'(Cfg) ->
    _ = Cfg,
    ok.



'5'(Cfg) ->
    _ = Cfg,
    ok.



'6'(Cfg) ->
    _ = Cfg,
    ok.



'7'(Cfg) ->
    _ = Cfg,
    ok.



'8'(Cfg) ->
    _ = Cfg,
    ok.



'9'(Cfg) ->
    _ = Cfg,
    ok.



'10'(Cfg) ->
    _ = Cfg,
    ok.
