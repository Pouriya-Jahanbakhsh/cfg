%% Auto-generated by https://github.com/Pouriya-Jahanbakhsh/estuff
%% -----------------------------------------------------------------------------
-module(cfg_keeper_SUITE).
-author('pouriya.jahanbakhsh@gmail.com').
%% -----------------------------------------------------------------------------
%% Exports:

%% ct callbacks:
-export([init_per_suite/1
        ,end_per_suite/1
        ,all/0
        ,init_per_testcase/2
        ,end_per_testcase/2]).

%% Testcases:
-export(['1'/1
        ,'2'/1
        ,'3'/1
        ,'4'/1
        ,'5'/1
        ,'6'/1
        ,'7'/1
        ,'8'/1
        ,'9'/1]).

%% -----------------------------------------------------------------------------
%% Records & Macros & Includes:

-include_lib("common_test/include/ct.hrl").
-include_lib("eunit/include/eunit.hrl").

%% -----------------------------------------------------------------------------
%% ct callbacks:


all() ->
    ToInteger =
        fun
            ({Func, 1}) ->
                try
                    erlang:list_to_integer(erlang:atom_to_list(Func))
                catch
                    _:_ ->
                        0
                end;
            (_) -> % Arity > 1 | Arity == 0
                0
        end,
    % contains 0 for other functions:
    Ints = [ToInteger(X) || X <- ?MODULE:module_info(exports)],
    % 1, 2, ...
    PosInts = lists:sort([Int || Int <- Ints, Int > 0]),
    % '1', '2', ...
    [erlang:list_to_atom(erlang:integer_to_list(X)) || X <- PosInts].


init_per_suite(Cfg) ->
    application:start(sasl),
    Cfg.


end_per_suite(Cfg) ->
    application:stop(sasl),
    Cfg.


init_per_testcase(_TestCase, Cfg) ->
    Cfg.


end_per_testcase(_TestCase, _Cfg) ->
    ok.

%% -----------------------------------------------------------------------------
%% Test cases:

'1'(_) ->
    % init:
    ?assertMatch(ok, cfg:init({test, ok})),
    ?assertMatch({error, {init_config_keeper, #{k := v}}}, cfg:init({test, {error, #{k => v}}})),
    ?assertMatch({error, {init_config_keeper, #{returned_value := unknown}}}, cfg:init({test, unknown})),
    ?assertMatch({error, {init_config_keeper, #{exception := oops}}}, cfg:init({test, {exception, oops}})),
    ok.



'2'(_) ->
    % set/2:
    ?assertMatch(ok, cfg:set({test, fun(X) -> X end}, ok)),
    ?assertMatch({error, {set_config, #{k := v}}}, cfg:set({test, fun(X) -> X end}, {error, #{k => v}})),
    ?assertMatch({error, {set_config, #{returned_value := unknown}}}, cfg:set({test, fun(X) -> X end}, unknown)),
    ?assertMatch({error, {set_config, #{exception := oops}}}, cfg:set({test, fun(X) -> erlang:error(X) end}, oops)),
    ok.



'3'(_) ->
    % set/3:
    ?assertMatch(ok, cfg:set({test, fun(X, _) -> X end}, ok, undef)),
    ?assertMatch({error, {set_config, #{k := v}}}, cfg:set({test, fun(X, _) -> X end}, {error, #{k => v}}, undef)),
    ?assertMatch({error, {set_config, #{returned_value := unknown}}}, cfg:set({test, fun(X, _) -> X end}, unknown, undef)),
    ?assertMatch({error, {set_config, #{exception := oops}}}, cfg:set({test, fun(X, _) -> erlang:error(X) end}, oops, undef)),
    ok.



'4'(_) ->
    % get/1:
    ?assertMatch({ok, []}, cfg:get({test, {ok, []}})),
    ?assertMatch({error, {get_config, #{k := v}}}, cfg:get({test, {error, #{k => v}}})),
    ?assertMatch({error, {get_config, #{returned_value := unknown}}}, cfg:get({test, unknown})),
    ?assertMatch({error, {get_config, #{exception := oops}}}, cfg:get({test, {exception, oops}})),
    ok.



'5'(_) ->
    % get/2:
    ?assertMatch({ok, value}, cfg:get({test, fun(X) -> X end}, {ok, value})),
    ?assertMatch(not_found, cfg:get({test, fun(X) -> X end}, not_found)),
    ?assertMatch({error, {get_config, #{k := v}}}, cfg:get({test, fun(X) -> X end}, {error, #{k => v}})),
    ?assertMatch({error, {get_config, #{returned_value := unknown}}}, cfg:get({test, fun(X) -> X end}, unknown)),
    ?assertMatch({error, {get_config, #{exception := oops}}}, cfg:get({test, fun(X) -> erlang:error(X) end}, oops)),
    ok.



'6'(_) ->
    % get/3:
    ?assertMatch({ok, value}, cfg:get({test, fun(X) -> X end}, {ok, value}, default)),
    ?assertMatch({ok, default}, cfg:get({test, fun(X) -> X end}, not_found, default)),
    ok.



'7'(_) ->
    % delete/2:
    ?assertMatch(ok, cfg:delete({test, fun(X) -> X end}, ok)),
    ?assertMatch({error, {delete_config, #{k := v}}}, cfg:delete({test, fun(X) -> X end}, {error, #{k => v}})),
    ?assertMatch({error, {delete_config, #{returned_value := unknown}}}, cfg:delete({test, fun(X) -> X end}, unknown)),
    ?assertMatch({error, {delete_config, #{exception := oops}}}, cfg:delete({test, fun(X) -> erlang:error(X) end}, oops)),
    ok.



'8'(_) ->
    % delete/1:
    ?assertMatch(ok, cfg:delete({test, ok})),
    ?assertMatch({error, {delete_config, #{k := v}}}, cfg:delete({test, {error, #{k => v}}})),
    ?assertMatch({error, {delete_config, #{returned_value := unknown}}}, cfg:delete({test, unknown})),
    ?assertMatch({error, {delete_config, #{exception := oops}}}, cfg:delete({test, {exception, oops}})),
    ok.



'9'(_) ->
    _ = cfg_keeper:module(env),
    _ = cfg_keeper:module(ets),
    ok.
